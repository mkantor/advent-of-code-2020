const floor = '.'
const empty = 'L'
const occupied = '#'

type SeatState = typeof floor | typeof empty | typeof occupied
type Seats = SeatState[][]

function seatsToString(seats: Seats): string {
    let stringified = ''
    for (const row of seats) {
        for (const seat of row) {
            stringified += seat
        }
        stringified += '\n'
    }
    return stringified
}

function stepNaive(seats: Seats): Seats {
    const nextSeats: Seats = []
    for (let row = 0; row < seats.length; row++) {
        if (nextSeats[row] === undefined) {
            nextSeats[row] = []
        }
        for (let column = 0; column < seats[row].length; column++) {
            const thisSeat = seats[row][column]
            const adjacentSeats = [
                seats[row - 1]?.[column - 1],
                seats[row - 1]?.[column],
                seats[row - 1]?.[column + 1],
                seats[row]?.[column - 1],
                seats[row]?.[column + 1],
                seats[row + 1]?.[column - 1],
                seats[row + 1]?.[column],
                seats[row + 1]?.[column + 1],
            ]

            const occupiedAdjacentCount = adjacentSeats.filter(
                (seat) => seat === occupied,
            ).length

            if (thisSeat === empty && occupiedAdjacentCount === 0) {
                nextSeats[row][column] = occupied
            } else if (thisSeat === occupied && occupiedAdjacentCount >= 4) {
                nextSeats[row][column] = empty
            } else {
                nextSeats[row][column] = thisSeat
            }
        }
    }
    return nextSeats
}

// This function had post-solution cleanup. Initially I just used a ton of
// copypasta for checking each visible direction. Factoring it out into a
// reusable closure made the code much shorter.
function stepRealistic(seats: Seats): Seats {
    const nextSeats: Seats = []
    for (let row = 0; row < seats.length; row++) {
        if (nextSeats[row] === undefined) {
            nextSeats[row] = []
        }
        for (let column = 0; column < seats[row].length; column++) {
            const thisSeat = seats[row][column]

            const castRay = (rowAdjust: number, columnAdjust: number) => {
                let nextSeat
                let nextRow = row
                let nextColumn = column
                do {
                    nextRow = nextRow + rowAdjust
                    nextColumn = nextColumn + columnAdjust
                    nextSeat = seats[nextRow]?.[nextColumn]
                } while (nextSeat === floor)
                return nextSeat
            }

            const visibleSeats = [
                castRay(-1, -1),
                castRay(-1, 0),
                castRay(-1, +1),
                castRay(0, -1),
                castRay(0, +1),
                castRay(+1, -1),
                castRay(+1, 0),
                castRay(+1, +1),
            ]

            const occupiedVisibleCount = visibleSeats.filter(
                (seat) => seat === occupied,
            ).length

            if (thisSeat === empty && occupiedVisibleCount === 0) {
                nextSeats[row][column] = occupied
            } else if (thisSeat === occupied && occupiedVisibleCount >= 5) {
                nextSeats[row][column] = empty
            } else {
                nextSeats[row][column] = thisSeat
            }
        }
    }
    return nextSeats
}

function simulateUntilStable(
    seats: Seats,
    step: (seats: Seats) => Seats,
): Seats {
    const nextSeats = step(seats)
    if (JSON.stringify(seats) === JSON.stringify(nextSeats)) {
        return nextSeats
    } else {
        return simulateUntilStable(nextSeats, step)
    }
}

function countOccupiedSeats(seats: Seats): number {
    let count = 0
    for (const row of seats) {
        for (const seat of row) {
            if (seat === occupied) {
                count++
            }
        }
    }
    return count
}

const seats = [
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL',
    '.......L.L.....LL..L....LLL...L...........L.....L...LL...L.....L..LL..L..L.L...L........L.L',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLL.LL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL..LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'L.LLL..L...L.L.......L....L..LLL........LLL..L..L....LLLLLLL.......L.L...L........LL.L..L..',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    '.L..LLLLL.....L..L...L....L..LLL.L.....L......L..LL......L.L...LLL..LLLL......LL.L.L...L...',
    'LLLLLLL.LL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLLLLL.LLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL..LLLLLLL.LLLLLL',
    'LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLL.L',
    'LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLL.L',
    'LLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'L..........LLL....LL...............L.....L.......L......L..L.L...L..LL.......L..L...L....LL',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL..LLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLL.LLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL',
    'L...L..L..L.L...L..L.L.....L....L..L...L....L.LL..L.L...L.L.LL....LL..L..L......L.L...L..L.',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLL.L.LLLLL.LLLLL..LLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLL.L.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLL.LL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    '....L....L.L..LL.L...LLL.L.L..L........L..L..L....L..LL..L.L....L......LL.L.......L.LL....L',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    '..L..L..LLL..L...L.......LL..L..LLLL.L....L.LLL.L...L...LL...LL.L.L......L.......L....LL.L.',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LL.LL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLL..LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'L...LLLLLLLL..L....L.L....L...LL..L.LL..L.L.L.L..L....L.....LL.........LL.L.....L.LL..L...L',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.L.LLLLLLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.L.LLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.L.LLLLLLLLLLLLLLL.LLLLL.L.LLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLL.LLL.LLLLL.LLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLL..LLLLLL',
    '.L..LL....L..L.LL.......L.L.L.........L...L.L...LL......LL..L...L..L.L.L..L........L....L.L',
    'LLLLLLL.LLLLLLLL.LLLLLLL..LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.L.LLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    '..LL..L.LL..L........L.L..L.....L.L..L.L.....LL.LL...L....L..LL.L...LLLLL.L.L.....L.......L',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLL.LL',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL',
    'L.L..........L.L...LL...L....L..L.L..L.........LL...L..L...L...L.L.LLL.L.....LL....L......L',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLL..LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LL.LLLLLLLLLLL.LLLLLL',
    'LLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL..LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LL.LL.LLLLLLLLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL',
    'LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL',
    'LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL',
].map((rowAsString) =>
    rowAsString.split('').map((seat) => {
        if (seat !== floor && seat !== occupied && seat !== empty) {
            throw new Error(`Invalid character in input: ${seat}`)
        } else {
            return seat
        }
    }),
)

console.log(
    'Occupied seats after naive simulation:',
    countOccupiedSeats(simulateUntilStable(seats, stepNaive)),
)

console.log(
    'Occupied seats after realistic simulation:',
    countOccupiedSeats(simulateUntilStable(seats, stepRealistic)),
)
