// This one was a hot mess. I was sleep deprived when I started, and had the
// hilarious idea to "parse" expressions by munging them into JSON and using
// JSON.parse. Things went downhill from there.
//
// In retrospect it would have been better to abstract out the expression tree
// into a saner data structure (not just a bunch of nested arrays). If I were
// to do this for real I probably wouldn't pick TypeScript either, at least not
// without libraries to help. It's just begging for a ML-ish ADT so I'd really
// want nominal types and nicer tagged unions.

type BinaryOperator = '+' | '*'
type PrimitiveOperation = [
    number,
    BinaryOperator,
    ...(number | BinaryOperator)[]
]
type Operation = (Expression | BinaryOperator)[]
type Expression = number | Operation | PrimitiveOperation

function isPrimitiveOperation(
    expression: unknown,
): expression is PrimitiveOperation {
    return (
        Array.isArray(expression) &&
        expression.length >= 3 &&
        expression.length % 2 === 1 &&
        expression.every((token, index) => {
            return index % 2 === 0
                ? typeof token === 'number'
                : token === '+' || token === '*'
        })
    )
}

function operate(
    operand1: number,
    operator: BinaryOperator,
    operand2: number,
): number {
    switch (operator) {
        case '+':
            return operand1 + operand2
        case '*':
            return operand1 * operand2
    }
}

function evaluate(expression: Expression): number {
    if (typeof expression === 'number') {
        return expression
    } else if (isPrimitiveOperation(expression)) {
        const result = expression.slice(1).reduce(
            (result, token) => {
                if (
                    typeof token === 'string' &&
                    result.operator === undefined
                ) {
                    return {
                        ...result,
                        operator: token,
                    }
                } else if (
                    typeof token === 'number' &&
                    result.operator !== undefined
                ) {
                    return {
                        operand: operate(
                            result.operand,
                            result.operator,
                            token,
                        ),
                        operator: undefined,
                    }
                } else {
                    throw new Error(`Invalid expression at token \`${token}\``)
                }
            },
            {
                operand: expression[0],
                operator: undefined as BinaryOperator | undefined,
            },
        )
        return result.operand
    } else {
        const reducedExpression = expression.reduce<Operation>(
            (reducedExpression, token) => {
                if (Array.isArray(token)) {
                    reducedExpression.push(evaluate(token))
                } else {
                    reducedExpression.push(token)
                }
                return reducedExpression
            },
            [],
        )
        return evaluate(reducedExpression)
    }
}

function parse(stringifiedExpression: string): Expression {
    // loool
    const hopefullyJson = `[${stringifiedExpression
        .replace(/\(/g, '[')
        .replace(/\)/g, ']')
        .replace(/\+/g, '"+"')
        .replace(/\*/g, '"*"')
        .replace(/\ /g, ',')}]`
    return JSON.parse(hopefullyJson)
}

function simplify(operation: Operation): Operation {
    if (operation.length === 1 && Array.isArray(operation[0])) {
        const simpler = simplify(operation[0])
        return simpler
    } else {
        return operation
    }
}

function preferAddition(inputExpression: Expression): Expression {
    if (typeof inputExpression === 'number') {
        return inputExpression
    } else {
        const expression = [...inputExpression]
        for (let index = 0; index < expression.length; index++) {
            const subexpressionOrOperator = expression[index]
            if (
                Array.isArray(subexpressionOrOperator) &&
                !(
                    subexpressionOrOperator.length === 3 &&
                    isPrimitiveOperation(subexpressionOrOperator)
                )
            ) {
                expression[index] = preferAddition(subexpressionOrOperator)
            } else if (subexpressionOrOperator === '+') {
                const operand1 = expression[index - 1]
                const operand2 = expression[index + 1]
                expression.splice(index - 1, 3, [
                    operand1,
                    expression[index],
                    Array.isArray(operand2)
                        ? preferAddition(operand2)
                        : operand2,
                ])
                index -= 1
            }
        }
        return simplify(expression)
    }
}

const inputs = [
    '4 + (5 + (5 * 5 + 3 + 2) + (6 + 4 * 9 * 2 * 8) * 6 + (7 * 5 * 2) * (2 * 8 * 2)) + (8 * 7 + 7) * 6 * 9 * (5 + 9)',
    '(5 + 4 + 8 * 4 * 9 * (3 + 8 * 7 + 5 + 5)) * 6 * 8 * 9 * 4 + 2',
    '(6 * (2 * 7 * 3 * 7 * 2) + 5 * 4 + (2 * 9 + 8 + 3) + 6) * (8 + 3 * 9) * ((9 * 2) + 2)',
    '5 * (2 * 8) * 6 + 4',
    '5 * (5 + 2 * 7) * 5',
    '2 + 4 * (4 * 3 * 7 * 2) * 3',
    '4 + (3 * (9 + 7 * 5 * 5 + 5) + 2) * (2 * 9)',
    '(5 + 5) + 2 + 4 + 5 * (8 * 9)',
    '(3 + 4) * 8',
    '4 * 6 + 5 + (5 + 9 * 4 + 6 + 7 * 4) + 4 * 3',
    '(8 + 6 * 4 * 6 * 9) + 8 + (7 + (7 * 2 + 3 + 9 + 4 + 5)) * 7',
    '9 * (6 * (8 + 3 + 3 * 5 * 7) * 2 * 7 * 9 + 6) * 6 * 7',
    '(7 * 8) + ((6 + 8 + 8 * 7 * 7 + 9) * 6 + (5 + 3 + 7 + 4 * 9) + 9 + 5 + 5) * (6 + 6 * 4 * 2 + 4) * 5',
    '(7 + 3 + (4 * 2 + 4 + 5 * 5) + 5) + 4 + 5',
    '2 + 5 + 4 + ((3 * 7 + 6 + 2 * 8) * 9) + (3 + 4) * 3',
    '2 + 5 + 3 * ((7 * 8 + 6) * 9) + 2',
    '(7 + 2 * 9) + 2',
    '((3 + 2 + 9) + 2 + (3 * 2 * 6 * 9 + 4) * (2 + 2 + 6 + 5 * 2) + 7 * 3) * 4',
    '5 * (2 + 2) * 2',
    '(2 * (3 * 4 + 4)) * (7 * 8)',
    '4 + 7 * 9 * (7 + 8) + (6 + 7 + 5 * 4)',
    '(3 + 2 * 2 + 3 + 7) * ((6 * 6) * 4 * 6 + (7 * 7 * 4 * 4 * 3 * 5) * (8 * 3 * 3 + 7 + 4 * 5)) * 9 + 8 * 6',
    '7 * 2 * ((7 * 2 + 7 + 9) + 4 + 2 + 2 + (3 * 5 + 9 * 4 + 3 * 2)) * 5 + 7 * 7',
    '3 + 2 * (9 + 8 * (3 + 5 + 7) + (2 + 8) * 7 + (2 + 8)) * ((4 * 8 * 9 + 5) + (8 * 9 + 3 * 9 + 7)) + 9',
    '(5 * (5 + 4 * 8 * 8 + 9) + 8) * (6 + 9 + 9 * 5 + 8) + 7 + 9',
    '6 * 2 * (9 + (7 * 3) + 4 * 4 * 6) * ((2 * 3 * 2 + 7) + 4 + 3)',
    '(6 + 9 * 5 + 8 * 5) * 9 * 4 * 5 * 5 + 8',
    '(9 + (2 + 8 * 7) * (4 * 6 * 6 + 3) + 4) + 4 + 6 * 2 + 3',
    '(3 * 7 + (5 * 4 + 3 * 8) * (5 + 9 + 2 + 2) * 5) + (5 * 9 + (3 + 7 + 2) + 7 * 8 + 4) * 6',
    '4 + 5 + (7 + (9 + 8 * 2 * 5) + 3 * 3 + 6 + (9 * 4)) * 6 + 7 + (2 * 4 * 7 * 5)',
    '3 * (2 * 7) + 6 + 2 * ((4 + 9 + 4 * 7 * 7) * 8 * 9 + 8 + (9 + 3 * 6 * 2))',
    '8 * ((7 * 3 + 5) * 2)',
    '(3 * 8 * 2) + 6 * 7 * 8 * ((8 + 3) + 7 * (4 * 5 + 3 + 5 * 2 + 6) * 3 * 8 * 9)',
    '6 * 7 * (6 + 7 * 5 + 5 * 5 + 4) * (2 + 3 + 4)',
    '((5 + 8 + 6 * 7) + 5 * 7 * (4 * 6 + 5 * 4)) * 9',
    '8 * 4 * 4 + (6 * 5 + 4 + 3 + 5 + 2)',
    '6 * 4 + 8 + 8 * 8 * ((7 + 5 * 4 * 3 + 7) + 2)',
    '5 + (4 * 8 + 6 + 8 * 5 * (4 + 5)) * (3 * 2) + 2',
    '9 + 7 * 7 + (2 * 4) * 2 + (3 + 4 * 5 * (2 * 8 * 4))',
    '6 + (6 + 3 + 4 + 2 * 6) + 3',
    '7 + 9 * 3 * 3 + 5',
    '(3 + 6 + 8 + 8 * 2 + 4) + (6 * 3 * 7 * (7 + 8) + 6 * 7) + 7 * 9 * ((9 * 8 * 7 * 3) * 8 + 7)',
    '(4 * (6 * 6 + 4 + 9 + 9) * (4 + 5 * 8)) * (9 + 7 * 6 * 3 * 8 * (5 * 2 + 2))',
    '9 * 5 + ((4 * 9 * 3) * 6 * 3 * 9 * 5) * (6 * 6 * 8 * (8 + 8 * 7 + 3 + 5) * 6) + (3 * 8 * 8 + 8 * 6 * 4)',
    '6 * 3 * (6 * 4 * 4) * 4 + 9',
    '9 * (6 + 7 * 4 * 7 + 2 * (8 + 5 + 9 + 4 * 2)) * 5 + 9',
    '(8 + 7) * 6 + 8 + 5',
    '((5 + 2 * 3 * 4) * 2 + (5 * 7 + 8)) + 3 * 7 + 8 + (8 + 3 * 7 * (7 + 3 + 6 * 6))',
    '(2 * 8) * (6 + 9) * 6 + 6',
    '7 * 2 + 2 * (4 * 3 * 4) + 8',
    '6 + (9 + 4 * (9 * 9) + 2 + 9) * 2 + 2 + 6',
    '7 + 4 * (9 + (9 * 5 + 7 * 3) + (9 + 4)) + (9 + 2 * (9 + 3) * 7 + 9) * 9',
    '8 + (4 + 6 + (2 + 5 * 5) * (8 * 3 * 8 * 2) + 2 + 6) * 5 * ((4 * 2 + 7 * 8 * 6 + 5) + 3 * 5)',
    '7 * ((4 + 4 * 3 + 9 * 2) * 3) + 6',
    '5 + (4 * 2 + 7 + 8 + 4 + 7) + 8 * 2 * (7 * 8 + 5 * (9 * 3 * 8) + 7)',
    '7 + 8 + 5 * (2 + (5 + 4 * 2 * 7) + 2) * (2 * 7 * (6 + 9 * 2 + 5 + 5 * 4))',
    '(2 * 5 + 4 + 2 * 5 + 6) * 4 * ((7 * 4 + 9) + (2 * 2 * 6 * 6 + 2) + 4 + (3 + 7 * 3 + 9 + 6 * 7) + (9 + 5 + 8) * 6) * 7 * 6',
    '((5 + 8) * (9 + 6 + 7 + 8 * 4 * 9) * 2 * (8 + 4 * 3 + 5 * 3 + 2) * 6) + 4 + (9 + 7) * 9 + 8',
    '6 * (2 + 4 * 8 * 7 * 4 * (7 * 4 * 9 * 3 + 9)) * (6 * 7 + 7 * 6 * 8 + 5) * 3 * 8 * (7 + 2 * 2 * 4)',
    '(8 + (5 * 9) * (7 + 4 + 8 * 2 + 9) + 5 + 8 + (4 * 9 * 5)) + (6 + 3 + 5 * 3) + 8 * (6 + 5 * (7 + 6) + (5 * 8) * 2 + 6)',
    '((5 + 4) * 7) + 5',
    '(8 + 8 * 2 * 4 * 7 * 5) * 9 * 4 * 3 * 8 + (9 + 6 * 3 * 9 + 2)',
    '5 * 7 * 7 + 9 * 3 * (8 + 5 + 8 + 9 * 3)',
    '6 * 9 + 6 + 5 * 2 * (7 + 4 * (6 * 8))',
    '(4 * 4 * 2) + (7 + 5 * 3) * 6 + 6',
    '3 + (4 * (8 + 7) + 5) + (8 * (9 * 6 * 9 * 6))',
    '3 + 3 * (2 * (5 + 2 * 4 + 4 * 5 + 4) + (7 + 8 * 5) + 5 * 9)',
    '2 + 7 * 6 * 9 * (8 * 3) * 5',
    '(7 * (7 + 4) + (5 + 9 * 6 + 2) * 4) + 3 * 7 + 5',
    '3 + (9 * 7 * 5 * (4 * 6))',
    '(7 + 3 * 9 * 5 * 9) * 6 * 2 * 6 * 6',
    '(5 * 3 + (4 + 7 * 2 * 5 * 4 + 3)) * 2 + 2 + (3 * 8 * (9 * 3 * 9 + 5 * 3)) * 4',
    '(3 + 8 * (5 * 4)) + 8 * (5 * (8 + 2 + 3))',
    '4 * 7 + 9 + (5 + 5 * 2 * 7 * 9) + 6 + 5',
    '4 + 6 * (8 + 2 + 6 + 7 + 3 + 2) + 4 * 5',
    '(6 + (3 * 9 + 9 + 7)) * (7 + 4 * (5 + 5 * 3) + (6 + 2 * 3) * 2)',
    '7 + 2 + 5 + (3 + 3 + 5 + 8) * 5 * 2',
    '6 + 6 * 6 * (9 * 4 + (5 * 2 * 3) + (7 * 9 + 4 * 2) + (9 + 4 * 4)) * 6 * 6',
    '2 * 3 + 9 + 6 * (3 + (2 + 4))',
    '2 * 2 * ((7 * 2 + 2 * 5 + 2 + 2) + 9 + 7) * 2 * (4 * 4 * (6 + 3) + 8 * 6 + 3) + (7 * 5 + 4 + 3)',
    '(6 + (5 + 4 + 3 + 5) * (2 + 3 * 7 * 7 + 3) * 2 * 9) * 8 * 3 + 6 + 9',
    '6 + ((8 * 5 + 4 + 2 + 7 * 6) + 4 + 9 * 2 + 4 + 6) * 3',
    '4 * (8 + 8 + 9 + (6 * 7) * 7) * 7',
    '6 + 5 * 2 + 3 + 5',
    '(2 * 9 * 8) * (3 + 5 + 4 * 4 * 2 + 8) * 9',
    '(4 + 7 * 5 * 6 + 2 * 3) + (6 + 2) + 8 + 8 * 7 * 8',
    '4 * 2 + (7 * 6 * 7 * (7 * 9 + 6 + 3)) + 2 * ((9 * 5 + 7 * 2 + 6) + 6 + 4 * 7) + ((8 + 7) * 5)',
    '5 + 9 * (6 + (4 + 9 + 5 * 5 + 5) + 7 + 5 + 6 + 5) * 2 * 2',
    '2 * (4 + 7 + 9 * (8 + 8) + 7) * 6 + ((7 * 5) + 8 + 5 * 8 + 4) * 6 * (6 * 3)',
    '(3 * 2) + (2 * 5) + 8 + 8 * 2 * (3 * 9 + 6 + 6 * 5 + 2)',
    '7 * (8 * 3 + 5 * 4 * (7 * 8 * 5 + 4 + 8 + 9) + (8 * 7 * 6 + 7 + 9)) + 5',
    '2 * 2 * 2 + ((7 + 9 + 5 + 9 + 2) * (3 + 9 * 5 * 8 + 4) + 9) * 5',
    '7 + (2 * 6 + 3 + (9 * 3)) * 4',
    '(3 + 2 + 2 + (3 + 8) * 4 + 9) + 6',
    '3 + (8 * (9 + 3 * 9 * 6) * (8 * 8 * 9 + 4 + 9) + 3 + 3 + 9)',
    '2 + 8 + 4 * (3 * (6 * 8 * 8) * 2 * 5 + (6 * 2 + 8))',
    '(4 * 2 * 5 + 4) + ((5 * 9 * 4 * 8 * 8) * 4) + (9 * 6 + 6 * 3 + 3) * 4 * 6 * 2',
    '((9 + 5 + 9 * 9 + 7) * 4 * 9) + 6 + 7',
    '(8 * (4 + 7 + 5) * 3 + 5) * 3 + 5 * (7 * 9 + 5)',
    '2 * 4 * (8 * (9 + 5 * 2)) + 8 + 8',
    '3 * 5 * ((8 + 3 + 9) * (6 * 7) + 5) * 4 * 5 * (5 * 7 * 2 + 9)',
    '2 * 7 * (6 * (2 * 3 * 8 * 2 + 6 * 2) * (4 * 3) + 6 + 5 * 2)',
    '(7 + 3) + 7 * ((2 + 4 * 2 + 5) * 5 + 7) * 3 + 3',
    '3 + ((6 * 4 + 5 * 5 + 7 + 4) + 8 * 2 * (7 + 3)) + 7',
    '((4 * 8 * 6 * 4) + 4 + 2 + 6) * 9 + 5',
    '9 + ((3 * 6 * 2 * 7) * 5 + 2 + (4 * 9) * 2 * (5 + 8 * 2 + 4 + 2 * 4)) + (6 * 8 + 2 * 4 * 7 + (5 * 3 + 3 + 8 * 8 + 3))',
    '3 + 7 + 8 * 3 * (3 * 8 + 6 * (4 * 4))',
    '(9 * (9 * 3 * 9 + 6 + 5) * 8 + 3) * 5',
    '(6 * 6 * 4 * 3 + (3 + 6) * 6) * 5 * (7 + 3 + 4 * 8 * 5)',
    '8 + (4 * 7 + 4 * (7 * 3 + 3)) * 8',
    '6 * (2 * 4 * 5 + 8) * 3 * 4 + 8 + (7 * 5 + 7 * 7 + 6 * (5 * 9 + 6 + 4))',
    '8 * 6 * (8 + 4 * 6 * 5 + 4) * (3 * 5 + 7 + (9 + 3 * 9) * 9) * (2 * 4 * 3) * 2',
    '3 * 6 * (2 * (5 * 3 * 6 + 8) + 3) + 6 * 5 * ((6 + 5) * (2 * 7 * 4 * 8 + 9))',
    '3 * (8 + 9 * (4 + 7 * 3) + 2 * 4 * 2) * ((5 * 3 + 4 * 5 + 5) + (4 * 7 * 9) + 2 * 8) + (5 * (8 * 6) + 2)',
    '(2 * 7 + 7 + 3 * 7 + 9) + 7 * (8 * 4 + 6 + 4 + 9)',
    '((8 + 2 * 7) * 6 * (5 * 5 * 4 + 2 + 8 * 9) * (5 + 3 + 3) * 3) * 6 * 9 + 6',
    '9 + (9 + (5 * 8 * 8) + 3) + 7 * 4',
    '8 + 5 + (4 * 2 * (3 + 2 * 4 + 8 + 7) + (8 * 5 * 4)) + 2',
    '(8 * (5 * 2 * 8 * 6 * 2 * 6) + 2) * 4 + (5 + 9 * 2 + 5) + 6 + 9',
    '9 * (2 * (3 * 9 + 6 + 5) * (8 * 8 * 9 + 9 * 7 + 9) * 5 * 8 * 7) + 8 + 4 * 8',
    '7 + 6 * 5 * 2 + 5 * (3 * 4)',
    '5 * 3 + 6 + (9 * 6 + 7 + 7) * (9 * 5 * 4 * 6 * 7 * 9) * 3',
    '4 + (6 + 3 + 9 + 3 + 7)',
    '9 * (8 + (4 + 8 + 8 + 2) + 5 * 5 + (4 * 4 + 5 * 3)) * (7 * 8 + 9 + 7) * 6',
    '5 + ((4 + 9 * 7) + (7 * 3 * 2) * 6) * 5',
    '2 + 3 * ((2 + 6 * 7) * 2)',
    '6 * (7 + 9 + (5 * 2 + 4 + 7 * 5 + 8) * 4 * 8 * 6) + 3 * (2 * 5 * 5 * 6 * 3 * 8)',
    '(5 + 6 * 5) * (5 + (8 + 7 * 4 * 9 + 9 * 8) * 8 + 2 + 5 + (9 * 2 + 6 + 6 * 9 * 6)) + 7',
    '(8 + (4 * 7) * 9 + 4) + 6 + 9 * 4 * (3 + 2 * 8 + (5 * 5) + 3 + 8)',
    '4 + 6 + 3 + (4 + 9 + 9 + 7 + (4 + 8 + 9) + 6) + 4 + 9',
    '((9 + 8 + 6 + 7 * 5) * 7 + 7 * 7) + 6 + 7 + (2 * (5 + 5 + 6 * 7)) + 2',
    '6 * 8 + ((5 + 3 + 6 * 9 + 7) * 9) * 9 + (2 * 5 + 3 * 2) + 6',
    '(9 + (6 + 4 + 8 * 9) + 2 + (3 + 3 * 6 + 3) * 5) * 9',
    '5 * 3 + 9 + 5',
    '(2 * 5 + 3 + 3) * (8 * 4 * 2) + 4 + 8',
    '5 * (5 * (9 * 9 + 5 * 6 * 4) + 7) + 5',
    '8 * ((7 + 5) + 7 + 6 * (2 * 2 + 6 + 6 + 2 * 9) + 2) + 2 * 9 + (6 + 2 * (6 + 4 + 8))',
    '(7 + (8 * 6 + 6) + 4 * 5 + 7) * 3 * 2 + 8 + 5',
    '(2 * 5) + (8 * 4 + 2 * 6 * 8) + 7 * 5 * 9',
    '(7 + 2 + (6 + 3 * 7)) + 4 * ((5 * 9 * 6 + 3 + 9 * 9) * 5 + 5)',
    '3 * 8 + (7 * 2 + 5 + 5 + 9 + (4 * 4 + 3 + 6 + 6 + 8)) * 6 + 9',
    '((4 + 8 + 2 + 5) + 4) + (6 + 9)',
    '8 + 2 * (5 * (6 + 5 * 5 + 3) * 3 * 8 * (9 + 7) * 4) + 7',
    '3 + 5',
    '8 + (5 + 9 * 8) + 9 + 7 + 3',
    '3 * (7 * (7 * 2 * 6 * 7) * 8 + 6) * 5 * ((9 + 5) + 2) * (2 * 4 * 4 + 7)',
    '(8 * (8 * 9) + 5 * (2 + 3 + 3 + 2) + 8 * (4 * 9 + 7 * 4 + 9 + 3)) + 3 + ((2 + 3 + 6) + 2 * 2 * 3)',
    '(3 + 5 + 5 * 4 + 8 * 6) + 3',
    '4 + (7 * 9 * 3 * 9 + 3) * (4 * 2 + 9 * (7 * 2) + (9 + 6)) + 9 + 7',
    '9 * (2 * (5 * 2) * 4) + 4',
    '(4 * 8 * (9 * 9 + 4 + 5 * 3 + 9) + 9 * 4) * (2 * 5) * 5 * (7 * 3) * 9',
    '8 * 8 * 9 + ((3 + 6) * 6 * 5) + 7',
    '(8 * 6 + 3 * (2 + 3 * 2) * 8 * 9) * 6 + 4 + 9 + 4 * (4 * 6 * 7 + (9 + 8 + 2 + 6))',
    '(3 * 6 * (7 + 2) * 3 * (4 * 7 + 3 + 6 + 2)) + 3 + 3 + (7 * 3 * 8 + 4 * 8)',
    '3 + ((6 * 6 * 9 * 7 * 2 * 3) * 5 * 9) + 9 + (4 + 7)',
    '5 + 2 + 4 + 5',
    '5 + 2 * (4 + 5 * 5 + 4 * 7 + 5)',
    '9 * (8 + 3 * 6 * 9) * (7 * 5 + 7 + 6 + 4) + 3 * ((2 * 2 * 6 + 5 + 5 * 7) + (4 * 3 + 5) + 8) * 5',
    '7 * (8 * 4 + (9 * 9 * 8) * (4 * 9 * 3) + (5 * 4 + 9)) + 4 * 2',
    '6 * (9 * 6 + 8 * 6 + 4 + 3) * 6 + 5 + 4 * 9',
    '4 * (2 * 6) + 2 * 2 + 7',
    '(6 * 3 + 4 * 4 * 6) + 3 * 8 * (6 + 4) * 5 + 8',
    '(6 + 4 * 9) + (2 + 2) + 2',
    '2 + 2 * (8 * 9) * 4 * 7',
    '((7 * 5) + 3 + 7) + 8',
    '(6 * 8 + 2 * 9 * (3 + 2 * 6 * 9) * 2) + 8 + (3 + 9 + 4 + (8 * 5 + 8)) * (6 + 6 * 3 + 7 + 9) * (4 * 6 + 6 + 6 + 3 * 4) + 2',
    '(2 + (3 + 3 + 9) * 2) * 8 + 5 * 3 + (6 + 9 + 6 * 5 + (6 + 4) * 9)',
    '(9 + (4 + 8 * 4 + 7) * 7 * 2 + 6 + 4) + (3 * 6 * (7 * 2 + 8 * 7 * 3 * 3) * 7) + (9 + 2 * 9 + 3) * (7 + 8 + 7 * (5 * 7 + 9 * 8 + 2 * 2)) + 9 * 4',
    '2 + 2 * 3 + 8',
    '2 * (4 + 5 * (9 + 6 * 7))',
    '6 * 9 * (2 * 4 + 2 + 2)',
    '(5 * 2 + 7 * 2 * 7 * (7 + 3 + 6 * 9 * 3)) * 7 + 7 + 3 + 5',
    '6 + 7 + 2 + 9 * 6',
    '3 + (3 * 7 * (6 * 9 * 7 * 9 + 6 + 4) * 2 + 5)',
    '6 + 2 + 6 + 3',
    '9 + 8 * ((6 * 5 * 3) + (4 + 9 * 6 + 3 + 7 + 8) + 3 * 9 * (7 + 3 + 6) * 3) * 4 + 2 + 6',
    '(8 + 2 + 5 * 4 + 3) * 6',
    '(7 * 8 + 3 + 6 * 2 + 3) + 4 + 2 + 5 * 7 * (4 + 3 + (3 + 8 + 6 * 3) + (4 + 3 + 5) * 3 + 9)',
    '3 + (2 * (6 * 9 + 6) * 4 + (7 * 6 + 7 * 2 * 9))',
    '6 * 6 + 5 + 6 + ((8 + 4 + 3 + 5 * 7) * 4 + 8) * (4 * (9 + 8 + 6 * 2 * 4) + (7 + 7) + 7 * 3 + 5)',
    '(9 * 2 * 5 + 7 + 4) * 4 * (5 * (4 * 3 * 6) + 5 * 6 * 2) + (2 * (5 * 8 + 6 + 4))',
    '(4 * 9 + 5) * (8 * 4) * 9 * 6',
    '9 * 6 + 5 + ((7 + 3) * 7 + 5)',
    '8 * (2 * 9) + 2 * 2 * ((4 + 8 * 8 + 5 + 2) * 9 * 8 + (9 * 9 + 8 * 4 + 9) * 3) * (8 * 7)',
    '7 * 4 + 5 + 3 + 6',
    '9 * (9 + 2 + (4 * 8 * 3 * 6) + 4 * 3 * 4)',
    '(7 * 8 * 5 * 2) * 7 + 4 * (4 + 4 * 9 * 9) * 2 * 3',
    '(8 * 2 + 9 + 4 * 2) + 4 + 8',
    '(8 + 8 * 7 * 3) * (4 * 5 + 5 + 3 * 8) * 8 * 8 + 6 + 5',
    '8 * (6 * 2) * 7 * 5 + 6 + 5',
    '(2 * 8 + 2 + 5 + 2) * 9 * (5 + 5)',
    '4 * (8 + 5 + 9 * 9) + 9 * (8 + 9 * 3 * 7 + 8) + (9 + 2 * 9 * 8 + (9 + 2 + 9 + 2))',
    '(5 * 8 * 8 + (3 + 7 + 6 * 2) + 3 + (8 + 5 + 6 * 4 + 9)) * 5 + 5 + 6 + (4 * 8 + 8 * 4 + (3 * 6 * 7) + (2 * 5 + 5 * 5))',
    '3 + (7 + 5) * (4 + (2 * 9 * 7 + 4) * 3 * 5 * (5 + 7 + 9 + 7)) + 9',
    '3 + 4 * 4 + 3 * 8 + (2 + 2 * 8 * 7)',
    '7 + (2 + 7)',
    '7 + (5 + 6 + 7 + 8 * 9 + 7) + 5 * ((8 * 3) * 4 * 6 + 9 * 2) + 7 + 5',
    '(4 + (5 * 3 + 9 * 6)) + 9 + 3',
    '9 + 4',
    '(3 + 9 * (9 + 8 * 4 + 3 + 4 * 6) + 5) + 8',
    '6 + 5 * ((4 + 5 * 2) + 4 * (5 * 8 + 4) + 8 * 4) * 7 + 6',
    '(8 * 6 + 6 * 6 + (4 + 2 + 3 * 5 * 3 + 4) * 7) * 8 + 2 * 3',
    '2 * (3 * 5 + (6 + 7 + 2 * 8 + 7) * (4 * 8 * 9 * 2)) + (9 + (7 + 2 + 6)) + 4 + 5 + 9',
    '3 * 5 + (6 + 9 + 2)',
    '3 + 4 * 6',
    '4 + 3 * 8 * 3 + 2 + 6',
    '9 + (6 * 2 * 5 + 5) + 7',
    '((8 + 2 * 5 + 2 * 9) + 8) + ((9 + 6 + 6 * 5 + 9 * 6) + 8 + 9 * 9) * (8 * 3 * (7 * 8 * 3 + 7) * 7) + (7 + 2 + 2 * 3 + 5 + 8)',
    '8 * (9 + 7 + 9 * 4 * 7 + 8) * (8 * 3 + 9 + (2 * 5 * 6) + (3 + 2 * 2 * 8 * 4) * 8)',
    '9 * 3 * (3 + 6 * 2 * 8 * 4) + 3 + 4 + 3',
    '6 + ((3 + 2) + 6 * 2 + 7 + 3) * 8 + 4 + ((6 * 3 * 6 + 2) + 6 + 2 + 3 + 7)',
    '((4 + 8) + 7 * 5 * 7 * 4) + 7',
    '(7 + (4 + 6 + 9) * 5 * (7 * 2 + 8)) + (9 * 8)',
    '3 + 9 * 6 + (7 + (9 + 2) + 2 + 8) + 9 * 6',
    '2 + 9 * (6 * 6 * (3 * 8 + 7 * 4 * 4) + 6) * 4',
    '3 + 9 + 3 * 8 * ((9 * 2 + 3 * 5) * 6 * 6 + 2) + 5',
    '7 + 5 + (8 * (4 + 6 + 8 * 6)) + 7',
    '8 * 7 * 6 * 3 * (5 + (4 * 9 * 5) + 4)',
    '((5 + 3) + 4 + 4 * 8) + 4 * 2 + 7',
    '(3 * (9 * 4 * 5 + 5 * 4 * 3) + 2) * 7 * (7 + 3 * 9) * ((2 + 9) + (6 * 5 + 4 + 9) + 4 + 5)',
    '(8 + 8) * 2 + 4',
    '(5 * 5) * 7 * (4 + 8 * 3 + 3)',
    '6 + (6 + 9 + 9) * (4 * 7 + 5)',
    '((2 * 3 * 3 * 3 * 5 * 9) + 8 * (2 * 8 + 4) + (2 * 9) + 4) * 9 + 9 + 7 * 5 + 3',
    '5 * ((6 * 8 * 8) + 7 + 2 + 2 * 6 + 5)',
    '8 + (8 * 5 + 3)',
    '6 * 3 * (9 * 2) + (9 + 2 * 3 + 6)',
    '5 + 4 * (2 + 2 + 5 * 6 + 3) + 5 + 3',
    '(6 * 8 * 3 + 4 + (3 * 4 * 4)) * 6',
    '(8 * (5 * 8 + 9) + 6 * 3 * 6 + 8) * 8 * 4 + 9',
    '7 + ((5 + 4 + 6 * 4 * 7) * (9 + 6 * 8 * 6))',
    '(9 + 4 * (4 + 9 * 9 + 4 * 9 * 6) * 2 + 9 + 8) * ((6 + 3 * 5) * 3 + 9 + 7 + (2 * 9) + 5) + 2 * (6 * 2 + 9 + 7) + 6',
    '8 * 7 * 3',
    '5 + ((9 + 8) * 7 * (4 * 2))',
    '(5 * (8 + 9 + 4 + 4) + (4 + 5 * 5 + 3 * 7) * (9 + 6)) * 5 + 8 + 2',
    '8 * (3 * 4) * (3 * 2 * 8 * 5 + 3 * (5 + 2 * 4))',
    '3 * 3 * (3 + 3 * 9) * ((4 + 6 * 8) + 2 + (7 * 9) + 6 + 2 + (5 * 8 + 4)) + 8',
    '9 * 5 * (7 + 6 * 6 * (5 + 7 + 8 + 4) + (3 + 8 * 5 * 3 + 8) + (5 + 4 * 2 * 7 + 8)) + 3 * 4',
    '8 + (6 + 7 * 9) * 2 + 9',
    '3 * 6 * 8 * 9 + (2 + 7 * 4) * ((3 + 9 + 6) * 4)',
    '9 + 7 * ((3 * 3) * 2 + 4) + 3',
    '(9 + 7 + 7 * 4) + 7',
    '5 + 5 + 6 * (8 * 7 * 8 + 4 * 8 + 2) + ((6 * 3 + 9 + 6 * 7 * 7) + 2) * (6 * 3 * 4 + 4 * (6 + 9) + (5 + 3 + 3 * 4 * 2))',
    '2 + 3 * 8 * (9 * 3 + 3 + (9 + 6 * 2 + 8 + 6 + 6) + 8 * 3) * 4',
    '7 * 2 + 2 + ((9 + 3 * 7 + 8 + 7) * 2 * 2 + (9 * 5 + 9 + 9 * 8)) + (6 * 8 * 7 * 6 * 2 + 2)',
    '(2 + 7 + 3) + 5 * 8 + 8 * 4',
    '9 * 8 + 8 * 8 + 8 * 4',
    '8 * (8 * 8 * 6 * (3 + 5 * 4)) + (8 + 9 * (8 + 9 * 8 * 8) + 4 * 3) + ((4 * 4) + 6 * 2 * 4 + 2) + 2 + 9',
    '6 * (8 + 2 + 5) + (9 * 6 * 5 + (8 * 4 + 4 * 8 + 4) + 8)',
    '3 + 6 + 7 + 5 + 8 * ((3 * 8 + 6) + 8)',
    '(5 + (5 + 6 + 9 + 4)) * 4 + 2 * 8 + 7 + (4 + (5 + 8 + 5 * 4) + 2)',
    '9 + (6 * 3 * 5 * (4 + 9) + (4 * 9))',
    '5 + (8 + 7 * 7 * 3) + 3 + 3',
    '9 + ((2 + 2) * 7 * 2 * 4 + 2) * 2 * 7',
    '4 * (6 * 9) + (7 + 7 * 2 + 8 * 5) + 5 * 6 + 6',
    '2 + 7 * (8 + 3 + 5 * (6 + 3 + 3 * 3) + 9 + (6 * 3)) + 3 * ((9 + 4 * 9) * 6 * 9 + 3 + 3) + 2',
    '6 * 6 + 6 + (6 * 4) + 2',
    '9 * ((3 * 2 + 2) * (6 + 9 * 9 + 5 * 5) + 9) * 6',
    '3 * ((8 + 4 * 6 * 2 + 5) + 4 + 2 * 9 + 2 * (9 + 7 + 4 + 6 * 7 + 4)) * 2 + ((3 + 9 + 8 + 7) * 4 * 7 * 9 * (9 + 3 + 7 + 5 * 2)) + (4 * 7 + 2)',
    '9 + ((8 * 2 + 9) * 6 * (8 * 3 + 2 + 8 * 3 * 4) + (5 * 2) * 5) + (3 * 6 * 4) * 4 + 6 * 2',
    '2 + 8 + 3 * (9 + 3 * 6 * 6 * 2)',
    '(3 + 9 + (6 + 3)) * 8',
    '((7 + 8) * 4 + 3 * (7 * 7) * 6 * (6 * 5 + 7 + 4 * 6 * 4)) * 5 * 4',
    '(6 + 6 + 7 * 3) + (2 * 3 * 2 * (2 * 8) + 4 * 9)',
    '(7 * 6 * 6 + (8 * 5 * 4 + 8)) + 3 + (7 + 4 + 7) + 7 * 4',
    '(4 + (8 + 8 + 5 + 8) + 8 + 8 * 4 * 9) * 7 * 2 * 2',
    '(6 + 4 + 9 * 9) * (8 + 9 + (7 * 7 * 2) * 2) * 3 + (5 * 7 * 3) * 7 + (8 + 9 + (9 * 2 * 9) + 8)',
    '4 + (6 * 6 * (4 * 7 + 3 * 8 + 6)) * ((7 + 7) * 2) + 9 + 4 * 2',
    '(5 + 5 + 5 + 2) + 7 + 9',
    '2 + 6 * (5 + 4 + 3 * 4 + 8) * (5 + 9 + 2 + 3 * 8)',
    '9 * 4 + 6 * 3',
    '(4 + 8 + 8) + 7 * (4 + (3 + 9) + 2) + 7',
    '((7 + 2 * 7 * 6 + 8 + 5) + 9 + 2 + (2 * 6 * 3 + 9 * 3) + 8 * 5) * 7 + (6 * 8 + 7 * (9 + 2 * 6 * 5 * 9) * (4 * 6 + 2)) * 8 + 3',
    '4 * 8 * (3 + (8 * 6 * 3 * 4 * 4)) + (6 + 7)',
    '8 * 6 * 8 * 3 + 9 * 8',
    '7 * (2 * (6 + 3 + 4 * 4 + 2) + 4 * (3 + 2 + 4 * 8 * 6) * 3 + 4) + 7 + 2',
    '5 + 8 + (9 + 9 + 6 + 4 * 9)',
    '7 + 7 + 9 + 9 * 6 * 6',
    '((9 * 8 + 7 + 6 + 2) * 6) * 7',
    '6 + 3',
    '4 * 9 * 4 * (7 * 9 * 4 + 5 * 4 * 5) * 2',
    '5 + 5 * (7 * 2) * (8 * 4 + 7 * 6 + 6) + 6 * 2',
    '(7 * (4 + 6 + 9 + 2 * 4) + 2 + 6) + 9 + 3 * 5 * (5 * 7 + (8 + 2 * 8) * 4 + 8)',
    '6 * (6 + 6 + (3 + 7 * 5 + 5) * 5 * 2 + (2 * 5 + 6 * 6)) * 2 + 6',
    '5 + ((8 + 5 * 7) + 9 + 6 + 3 * 3) * 6 * (2 * 6 + 6 * 6) * 5',
    '9 * 9 * ((4 * 6 * 5 * 5 + 8 + 3) * 8 * 7 + (8 * 9))',
    '4 * (4 * 5 * (7 + 7) * 2) * 6',
    '8 * (3 + 5) * (4 * 4 + (4 + 3 + 3) + 6)',
    '4 * (4 * (9 * 4 + 4 + 2) + 9) + 2 * 7 * 9',
    '4 * (5 + 3 + 4 + 8 + 3 * (6 * 9 * 5 + 7 * 8 * 6)) * (6 * 3) + 6 * 4',
    '9 + 3',
    '7 * 6 + (6 * 3 * 8 * 6) * 3 * (3 + 5 * (3 * 7 + 2 + 9 * 6) + (4 * 3 + 6 * 4 * 8 * 5) + 8)',
    '(7 * 2 + 5 + 2) * (3 + 6 + 3 * 9)',
    '9 * 5 * (5 + 9 * (5 * 6 + 2 + 9 * 2 + 3) * 4 + 6 + 9) + 6 + 2 * 8',
    '8 * 4 * 2',
    '((4 * 8) + 9) + (3 + (8 * 7) + 6 + 4) + 2 * 5 * 3 + 4',
    '3 * 3 + (2 * (8 * 3 + 5 + 4 + 9 * 4) * 2) * (9 * 8 * 4 + 5 * 8 * 2)',
    '3 + ((8 * 3 + 3 + 4 + 7 + 6) + 9 + 5) * (9 * 5 + 5 + 6 + 3 * 9) * 2',
    '2 + 7 * 6 + 7 + 6',
    '(9 + (3 + 7 * 5 * 8 * 2)) * 2 + 5 * 4 * (3 + 3 * (3 + 5 * 7 + 7 * 2))',
    '8 * 7 * 9 * 3 + (4 * 5 + 9 * 6 + 5 + 4) * 9',
    '7 * 5 * 6 * 9 + (2 + (8 + 6 + 3) + (9 * 2 + 9 + 5 + 9))',
    '5 * 3 + 8 + 2 + (4 + 2 + 5) + 8',
    '7 + (4 * (7 * 9 + 4 + 7) * 7 + 7 + 5) + 8',
    '5 * 4 + 6 * (5 * 4 + 3 * (3 * 2 + 6) * 8 + (3 * 2 + 4)) * 7',
    '(9 * (9 + 9 * 8 + 7 + 5 * 2) * 4 * 4 * (6 + 6) * 3) * (7 + 6 * (3 + 7 + 6) * 2)',
    '9 + 5 * 2 * (8 * 9)',
    '(2 * 9 + 5) * (2 + 8 * 4 * 5 * 4) + 2 + 3 + 3 * 7',
    '((6 + 9) + 5 + 5 * (9 + 2 + 9)) * 4 + 4 * 7',
    '4 * 4 + (9 + (8 * 3 + 2 + 8) * 4 * 8 + (4 + 6 + 8 + 8 * 2) + 8)',
    '4 + 5 + 9 + 3 * 8 * 9',
    '3 + (8 * 4 + 8 * 3 * 5) + 3 * 2 + 2 + 9',
    '(6 + 9 + 3 * 2 * 5 * 2) * 7 * 3 * 5 + (8 * 5)',
    '((2 * 3 + 9 * 7 * 5 * 9) * 9 * 8) + 8',
    '9 + (6 + 9 + 2) + (4 * 6 * 2 * (2 + 5 + 8 * 6 + 6))',
    '(5 + 9 * 5 * 7 * 3) * (2 * 6 + 4 * (6 * 3 * 3 * 5) + 6) * 3 + 6 * 6',
    '(4 + (9 * 2 * 8 + 8 + 6 * 9) * 5) * (7 * (7 + 7 * 8 + 3)) + (9 * 6 * 5 + (2 + 5 * 7)) + 5',
    '6 + 3 * (7 + 4) * (6 + 9 + (8 * 5 + 9 + 8) * 9 * 6)',
    '8 * (9 + (5 + 4 + 8) * 5)',
    '4 + ((9 * 5 * 4 + 8 + 2) + 4) + 8 * 7 + 2',
    '8 + 4 + 8 + 7 * (2 * 5)',
    '9 * 9 + (7 * 6 + 3 + 7 + 2) * (2 + 4) + 8 * ((7 + 6 * 3 * 8 + 5) * (5 + 3 * 6) * 9 + 7)',
    '8 * 7 * 8 * 6 * (4 * 5 * 5)',
    '3 * 4 + ((9 + 3) + 6 + 9 * 7 * 9 + 7)',
    '3 * 3 * (4 * (8 * 7 + 4 + 2 + 8) * (3 + 2 + 8 * 4) + (9 * 9 * 8 + 6 * 3)) * 5 + 8',
    '3 + (5 * 9 * 4 * 8 + 3) + 8 + (4 + 7 + 4 * 9 + 7)',
    '(5 + 7 * 7 + 2 * (5 + 3)) * (5 * (8 + 6 + 8) + 2 + (9 * 2 + 7 * 2 * 9)) + 3 * 6 * (4 * (7 * 2) * 6 * 3)',
    '7 + ((4 + 5 * 3 * 3 + 4) * 9 + 8 * 5 * (8 + 7 + 9 + 2 * 4 * 7) * 2) * 7',
    '7 + 5 * 8 * ((4 + 3 + 9 + 8 + 7 + 8) + 6 + 7 + 6 + 3 + 2) + 7 * 3',
    '(8 * 2 * 5 * 4 * (8 + 5) * 8) + 2 + 2 + 8 * 9 + 2',
    '(7 * 8 * 2 + 7 + 4) + 6 * 3 * 9 * (6 + 4 + 2 + 5 * 5 + 6)',
    '8 * 2 + (6 + 7)',
    '4 + (8 + 7) + (6 + 5 + 8 + 2 + 3 + 3) * 3 * 8 + 9',
    '3 * 9 * ((6 + 5 * 6) + 5 + 4 * (3 * 4 * 5 + 4) + 3) + 9',
    '(9 * 7 * (2 * 7 * 3 * 6) + 4 + 5) * 8 * (3 + (8 * 2 * 4 + 4) + 4 + (5 * 4 * 8 + 2 + 3) + (7 + 6 + 5 * 8)) + 6 + 3',
    '7 * 3 * 7 * 8 + 8 * ((3 + 3 * 5) * 4 * 5 + 2 + 6 * 2)',
    '(4 * 6 * 2) + 7 + 6',
    '5 + (5 + 8 + 8 + 4) + 9 + 6 * 7 + 6',
    '3 * (5 * 5 + (5 + 2 * 8 * 2) + 9 * 8) + 3 + 7 + 3',
    '2 + 7 * 7 + (3 + (5 + 2 + 7) * 6 * 4)',
    '6 + 5 * 8 + (2 + (6 + 4 + 6) + 6 * (7 + 6 * 4 + 9) * 6 * (3 * 7)) * (8 * 8 + 2 + 5 * 6 + 4)',
    '(2 + 7 + (3 * 9 * 3 * 3 * 5) + 4 * 2 + 9) + 4',
    '4 * (8 * (9 * 2 * 8 + 8 * 3 * 3) * 6 * (6 * 7 * 4 * 5 + 8)) * 8',
    '4 + 5 * 2',
    '(5 * (6 + 7 * 7 * 6) + (2 + 2) + 6) * 4 + 3',
    '(7 * 9 + 8 + 3 + 5 * (2 + 9)) * 7 + 6',
    '6 + 9 * (2 * 5 + 2 * (2 + 6 + 6 * 3 * 6 * 7)) + 2 * (5 + (5 * 8 * 6) * 9 * (6 + 2) + (9 + 6)) + 9',
    '6 + 8 * 5',
    '4 * 3',
    '6 + 2 + 5 * (7 + (3 + 8) * (8 + 5 + 2 * 5) + 2 * (8 * 3 * 4 + 6 * 9 + 4))',
    '5 * ((7 + 6) + 5 + 3 + 2 * (8 + 3)) + 2 * (4 * 2)',
    '(3 * 5) * 2 + 5 + 2 * 8',
    '6 * 7 * (8 + 7 + 5 * 4 * 2 + (3 + 4 * 3 + 6 * 4 * 6)) + 4',
    '8 * (9 + (3 * 2 * 9 + 2 + 8) * (7 + 9 + 6 + 2 + 6 * 9) + 8 + 5) * (3 + 5) + 6 + 4 * 8',
    '3 + (5 * (6 + 3) * 8 * (2 * 9) * 8)',
    '4 * (9 + 4 * 9 * (9 + 3 + 9 + 3 + 7) * 4 * 2) * ((3 + 9 + 2) + (2 * 3 * 2 + 8 * 9 * 7) + 8 + 9 * 5) + 8',
    '3 * 3 * (9 + 7 * (5 * 7 * 7) * 6 + 2 * 8) * 6 + 7',
    '5 + 3 + 8 + 2 * ((9 * 5 + 7) + (2 * 9 * 7 * 6) + 9 + 3)',
    '8 + (4 * 3 + (6 + 8 * 5 + 5) * (2 + 6 + 5 * 8)) * 6 * 6',
    '((2 * 8 + 5 + 3) + (8 * 6 * 3 + 3 + 6 * 5) + 5) * 4 * 2',
    '2 * (7 + (5 * 4 + 9) * 9) * 4 * 7 * (9 + 9 * 7 + 2 * 3 + 2)',
    '2 + 3 * 6 + ((5 * 3 * 2 * 2 * 8 + 3) * 8 + (6 + 5 + 5 * 3 * 4 + 3)) + 9',
    '6 * (7 + 3 * 7 * 7)',
    '(2 * 3) + 3 + (5 + 8 * 6 + 4 + 3 + 4) * 7',
    '8 + 4 * (7 * 7 * 8) * 8',
    '(9 * (3 * 5) + 6 * 9 + 9) + 4 + 2 * 6',
    '8 * (2 * 2 * 6 * 9 * 2) + 6 * 3',
    '4 + 4 + 7 * 9 + (4 * 3 + (6 * 2) + 5 + 3 * 8)',
    '(2 + 4 * 6 * 8 + 6 + 2) + 7 + 7',
    '(6 + 2 * 3 * 2) + 7 * 2 * (4 * 8 * 8 + 5 + 8 + 5) + 6',
    '8 * 3 + (6 + 5 + 2 * 6 * 6) * 2',
]

const sumOfResults = inputs
    .map(parse)
    .map(evaluate)
    .reduce((a, b) => a + b)
console.log('Sum of all results:', sumOfResults)

const sumOfResultsWithAdditionPrecedence = inputs
    .map(parse)
    .map(preferAddition)
    .map(evaluate)
    .reduce((a, b) => a + b)
console.log(
    'Sum of all results with addition precedence:',
    sumOfResultsWithAdditionPrecedence,
)
